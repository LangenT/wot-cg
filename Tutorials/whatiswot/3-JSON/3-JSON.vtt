WEBVTT

00:00:00.000 --> 00:00:06.737 
In this video, we will take a closer look at JSON. Since it is the most used

00:00:06.737 --> 00:00:13.475 
payload format in the Web of Things , as well as the way Thing Descriptions are represented.

00:00:13.475 --> 00:00:17.837 
So, let’s start with what is JSON.

00:00:17.837 --> 00:00:22.312 
JSON is a lightweight data-interchange format.

00:00:24.771 --> 00:00:29.633 
It is easy for humans to read and write

00:00:29.633 --> 00:00:35.768 
and easy for machines to parse and generate.

00:00:36.448 --> 00:00:43.601 
Let’s take a look at how parsing and generating happens. We can parse a JSON to visualize

00:00:43.601 --> 00:00:50.754 
the data such as temperature or we can send data, such as form content as JSON.

00:00:50.754 --> 00:01:02.797 
Or we can generate JSON from a given data, and send it in JSON format.

00:01:02.797 --> 00:01:05.729 
Let’s look at the quick facts about the JSON.

00:01:05.729 --> 00:01:16.204 
It was standardized by ECMA and IETF in around 2013, the current version is 2017 [RFC 8259]

00:01:16.196 --> 00:01:22.896 
It is used for data exchange but also for configuration files and It can be

00:01:22.896 --> 00:01:29.596 
translated to other popular formats in both ways like XML, YAML, and other formats.

00:01:29.596 --> 00:01:35.039 
Even though JSON stands for Java Script Object Notation, it does

00:01:35.039 --> 00:01:40.481 
not only consist of objects but also allows primitive types.

00:01:40.481 --> 00:01:46.009 
The confusion comes from the very early versions of JSON which only included

00:01:46.009 --> 00:01:51.537 
objects and would not allow the primitive types to exist on their own.

00:01:51.537 --> 00:02:00.312 
However, now JSON accepts objects and it has 5 primitive types that are also accepted on their own.

00:02:00.312 --> 00:02:03.892 
Let's look closer to these primitive types;

00:02:03.892 --> 00:02:11.429 
String, Number, Boolean, and null.

00:02:11.429 --> 00:02:17.314 
Now, we will talk about the structured types, which are split into two in JSON.

00:02:17.314 --> 00:02:21.522 
First one is name value pairs, called objects.

00:02:21.522 --> 00:02:30.105 
In various programming languages, this can be called an object, struct, dictionary, hash table or keyed list.

00:02:30.105 --> 00:02:37.459 
Second one is ordered list of values, called arrays. In most programming languages, this can be

00:02:37.459 --> 00:02:44.812 
called as an array, vector, list, or sequence. An array of different types is allowed too.

00:02:44.812 --> 00:02:49.768 
Name value pairs are also called key value pairs. Keys are

00:02:49.768 --> 00:02:54.724 
always strings and always start and end with quotation marks.

00:02:54.724 --> 00:02:57.442 
Now we can look closer at a JSON Object.

00:02:57.442 --> 00:03:04.424 
This is an example data sent by a humidity sensor. In between 2 curly brackets, we see

00:03:04.424 --> 00:03:11.405 
the name and value pairs that show the data structure and the data itself sent by the sensor.

00:03:11.405 --> 00:03:16.261 
We showed that JSON Arrays can consist of different primitive types before. With

00:03:16.261 --> 00:03:21.117 
JSON arrays it is also possible to list objects in it too.

00:03:21.117 --> 00:03:27.167 
Let's look at an example, in between 2 square brackets we list 2 JSON

00:03:27.167 --> 00:03:33.217 
objects. The data in the array is aggregated sensor values from the different sensors.

00:03:33.217 --> 00:03:37.655 
In this video we made the introduction to JSON.

00:03:37.655 --> 00:03:45.867 
In the next video, we will explain JSON types in detail and show the usage of JSON in practice.

