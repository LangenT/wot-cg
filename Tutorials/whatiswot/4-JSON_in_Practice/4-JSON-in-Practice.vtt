WEBVTT

00:00:00.000 --> 00:00:06.227 
In the last video, we showed mostly primitive types of JSON. In this video, we will

00:00:06.227 --> 00:00:12.455 
focus on first arrays and objects, and then we will mention common mistakes when writing JSON.

00:00:12.455 --> 00:00:18.682 
At the end of the video, we will demonstrate the usage of JSON generation and parsing.

00:00:18.682 --> 00:00:23.570 
In JSON, each value in an array is called an item.

00:00:23.570 --> 00:00:29.232 
Arrays with items of different types are also allowed.

00:00:29.232 --> 00:00:35.672 
Nested objects are allowed in JSON. “measurement” keyword is an example of this.

00:00:35.672 --> 00:00:44.068 
Objects start and end with curly brackets. It is basically defining keywords and mapping these keywords to values.

00:00:44.068 --> 00:00:50.866 
In this example, we define the name and value pairs to describe the data sent by sensors.

00:00:50.866 --> 00:00:59.079 
There is a JSON array of JSON Objects which means all items are JSON objects in that array.

00:00:59.079 --> 00:01:05.029 
Now we will talk about common mistakes while writing JSON files.

00:01:05.029 --> 00:01:09.141 
Let's start with the space character which is frequently overlooked.

00:01:09.141 --> 00:01:11.179 
Space is a character too.

00:01:11.179 --> 00:01:15.591 
So “is Active” is not the same as “is Active blank”

00:01:15.591 --> 00:01:20.118 
Also JSON is case sensitive. Thus, "is Active" with upper case A

00:01:20.118 --> 00:01:24.646 
is not the same as “is active” with lower case A.

00:01:24.646 --> 00:01:30.899 
Paying attention to this is important to make sure that object assignments and comparisons work.

00:01:30.899 --> 00:01:35.424 
Lets continue with the mistakes about quotation marks.

00:01:35.424 --> 00:01:41.299 
Forgetting quotation marks is wrong, it will show validation errors everywhere.

00:01:41.299 --> 00:01:45.837 
Also putting them when you should not cause unwanted results.

00:01:45.837 --> 00:01:52.337 
For example → “name”:”true” is not the same as “name”:true without quotation marks.

00:01:52.337 --> 00:01:57.687 
The first one is not a boolean but a string so it will be interpreted as a string.

00:01:57.687 --> 00:02:01.312 
The same problem happens with numbers too.

00:02:01.312 --> 00:02:07.812 
This way, the types will be incorrectly interpreted by your programming language.

00:02:07.812 --> 00:02:15.699 
Putting comments inside JSON documents is not valid contrast to most of the programming languages.

00:02:15.699 --> 00:02:19.953 
Commas should not be used at the final name-value pair.

00:02:19.953 --> 00:02:24.235 
That is why the first one is not valid but difficult to see if

00:02:24.235 --> 00:02:28.517 
you are using it inside of a javascript editor rather than a JSON editor.

00:02:28.517 --> 00:02:34.688 
Similar to the previous one depending on the programming language that you use syntax might differ.

00:02:34.688 --> 00:02:41.130 
Since JSON will be the object of that programming language before it is parsed and serialized as JSON.

00:02:41.130 --> 00:02:46.580 
For example, in JSON key-value pairs have to be with quotation marks whereas

00:02:46.580 --> 00:02:52.031 
in JavaScript files it is not necessary to have quotation marks, both work.

00:02:52.031 --> 00:02:55.368 
The syntax of the keywords might differ as well.

00:02:55.368 --> 00:03:01.138 
For example, true false keywords in JSON, Rust, JavaScript, and Golang are written lowercase

00:03:01.138 --> 00:03:06.908 
while in Python the first letter of these keywords needs to be capitalized.

00:03:06.908 --> 00:03:13.245 
Similar to the previous one, the null keyword differs in JSON and Python.

00:03:13.245 --> 00:03:17.503 
In JSON and JavaScript it is null with lowercase while in

00:03:17.503 --> 00:03:21.761 
Python, the same meaning is given with the "None" keyword.

00:03:21.761 --> 00:03:26.658 
Open a code editor. In this example, we used VS Code.

00:03:26.658 --> 00:03:33.209 
Write a JSON file of your choice and save it by giving a file name and adding a .json extension.

00:03:33.209 --> 00:03:37.475 
Then the editor will recognize the file as a JSON document.

00:03:37.475 --> 00:03:44.170 
Now we will read a JSON file from the file system using a JSON library in Python.

00:03:44.170 --> 00:03:50.638 
We open the JSON file that we have previously saved to the file system with open-as-file key words.

00:03:50.638 --> 00:03:55.904 
Then, we can load that JSON file with the load function into the data object.

00:03:55.904 --> 00:03:59.598 
We can also print it to see what is inside the JSON file.

00:03:59.598 --> 00:04:06.298 
Printing the data object in console can look like this.

00:04:06.298 --> 00:04:11.770 
There are many ways to send a JSON file via different protocols, one of

00:04:11.770 --> 00:04:17.242 
them is using Python and its request library for sending an HTTP request.

00:04:17.242 --> 00:04:25.043 
With this library, you can use the post function to send an HTTP POST request with a JSON Payload.

00:04:25.043 --> 00:04:30.428 
As a parameter, it takes the URL to send to and the JSON object.

00:04:30.428 --> 00:04:34.968 
In the next video, we will talk about JSON Schema.

